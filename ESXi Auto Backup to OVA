#!/bin/bash

# ESXi credentials and details
ESXI_USER="root"
ESXI_PASSWORD="MY_ESXI_PASSWORD"
ESXI_HOST="MY_ESXI_IP_OR_FQDN"
BACKUP_DIR="MY_BACKUP_DIRECTORY"
OVFTOOL_PATH="OVFTOOL_BINERY_PATH"
VM_POLL_INTERVAL=5  # Interval in seconds to check the VM's power state

# Function to execute commands via SSH
execute_ssh() {
    local command=$1
    sshpass -p "$ESXI_PASSWORD" ssh -o StrictHostKeyChecking=no "$ESXI_USER@$ESXI_HOST" "$command"
}

# Function to check if the VM is powered off
is_vm_powered_off() {
    local vm_id=$1
    local power_state=$(execute_ssh "vim-cmd vmsvc/power.getstate $vm_id | tail -n 1")
    if [[ "$power_state" == "Powered off" ]]; then
        return 0  # VM is powered off
    else
        return 1  # VM is still running
    fi
}

# Get the list of all VMs with their VMIDs and Names and save it to a variable
vm_list=$(execute_ssh "vim-cmd vmsvc/getallvms | tail -n +2")

# Use a for loop to iterate over each VM
IFS=$'\n'  # Set internal field separator to newline to handle each line correctly
for vm_info in $vm_list; do
    # Extract the VM ID (first field)
    vm_id=$(echo "$vm_info" | awk '{print $1}')
    
    # Extract the VM name by removing everything after the name (everything after '[')
    vm_name=$(echo "$vm_info" | sed -E 's/^[0-9]+\s+(.+?)\s+\[.+/\1/')
    
    # Sanitize the VM name to make it suitable for filenames
    # Replace spaces with underscores and remove any leading/trailing spaces
    sanitized_vm_name=$(echo "$vm_name" | sed 's/ /_/g' | sed 's/^ *//;s/ *$//')

    backup_file="$BACKUP_DIR/$sanitized_vm_name.ova"

    echo "Processing VM: $vm_name (VMID: $vm_id)"

    # Step 1: Check if backup already exists
    if [ -f "$backup_file" ]; then
        echo "Backup already exists for VM: $vm_name. Skipping backup."
        continue
    fi

    # Step 2: Check if the VM is already powered off
    if is_vm_powered_off $vm_id; then
        echo "VM: $vm_name is already powered off."
    else
        # If the VM is powered on, power it off
        echo "Shutting down VM: $vm_name"
        execute_ssh "vim-cmd vmsvc/power.off $vm_id"

        # Wait until the VM is fully powered off
        echo "Waiting for VM: $vm_name to power off..."
        while ! is_vm_powered_off $vm_id; do
            echo "VM: $vm_name is still powered on. Checking again in $VM_POLL_INTERVAL seconds..."
            sleep $VM_POLL_INTERVAL
        done
        echo "VM: $vm_name is now powered off."
    fi

    # Step 3: Backup the VM using ovftool
    echo "Backing up VM: $vm_name"
    $OVFTOOL_PATH --noSSLVerify vi://$ESXI_USER:"$ESXI_PASSWORD"@$ESXI_HOST/$vm_name "$backup_file"
    
    # Step 4: Power on the VM
    echo "Powering on VM: $vm_name"
    execute_ssh "vim-cmd vmsvc/power.on $vm_id"

    echo "Finished processing VM: $vm_name"
done

echo "All VMs processed."
